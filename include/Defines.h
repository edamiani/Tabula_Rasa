#ifndef __TR_DEFINES_H__
#define __TR_DEFINES_H__

#define TR_PLATFORM_WIN32 1
#define TR_PLATFORM_LINUX 2
#define TR_PLATFORM_APPLE 3

#define TR_COMPILER_MSVC 1
#define TR_COMPILER_GNUC 2
#define TR_COMPILER_BORL 3

#define TR_ENDIAN_LITTLE 1
#define TR_ENDIAN_BIG 2

#define TR_ARCHITECTURE_32 1
#define TR_ARCHITECTURE_64 2

/* Finds the compiler type and version.
*/
#if defined( _MSC_VER )
#   define TR_COMPILER TR_COMPILER_MSVC
#   define TR_COMP_VER _MSC_VER

#elif defined( __GNUC__ )
#   define TR_COMPILER TR_COMPILER_GNUC
#   define TR_COMP_VER (((__GNUC__)*100) + \
        (__GNUC_MINOR__*10) + \
        __GNUC_PATCHLEVEL__)

#elif defined( __BORLANDC__ )
#   define TR_COMPILER TR_COMPILER_BORL
#   define TR_COMP_VER __BCPLUSPLUS__

#else
#   pragma error "No known compiler. Abort! Abort!"

#endif

/* See if we can use __forceinline or if we need to use __inline instead */
#if TR_COMPILER == TR_COMPILER_MSVC
#   if TR_COMP_VER >= 1200
#       define FORCEINLINE __forceinline
#   endif
#elif defined(__MINGW32__)
#   if !defined(FORCEINLINE)
#       define FORCEINLINE __inline
#   endif
#else
#   define FORCEINLINE __inline
#endif

/* Finds the current platform */

#if defined( __WIN32__ ) || defined( _WIN32 )
#   define TR_PLATFORM TR_PLATFORM_WIN32

#elif defined( __APPLE_CC__)
#   define TR_PLATFORM TR_PLATFORM_APPLE

#else
#   define TR_PLATFORM TR_PLATFORM_LINUX
#endif

/* Find the arch type */
#if defined(__x86_64__) || defined(_M_X64)
#   define TR_ARCH_TYPE TR_ARCHITECTURE_64
#else
#   define TR_ARCH_TYPE TR_ARCHITECTURE_32
#endif

// Endian Settings
// check for BIG_ENDIAN config flag, set TR_ENDIAN correctly
#ifdef TR_CONFIG_BIG_ENDIAN
#    define TR_ENDIAN TR_ENDIAN_BIG
#else
#    define TR_ENDIAN TR_ENDIAN_LITTLE
#endif

#if TR_PLATFORM == TR_PLATFORM_WIN32
#  undef min
#  undef max
#  if defined( __MINGW32__ )
#    include <unistd.h>
#  endif
#endif

#if TR_COMPILER == TR_COMPILER_MSVC
// Turn off warnings generated by long std templates
// This warns about truncation to 255 characters in debug/browse info
#   pragma warning (disable : 4786)

// Turn off warnings generated by long std templates
// This warns about truncation to 255 characters in debug/browse info
#   pragma warning (disable : 4503)

// disable: "conversion from 'double' to 'float', possible loss of data
#   pragma warning (disable : 4244)

// disable: "truncation from 'double' to 'float'
#   pragma warning (disable : 4305)

// disable: "<type> needs to have dll-interface to be used by clients'
// Happens on STL member variables which are not public therefore is ok
#   pragma warning (disable : 4251)

// disable: "non dll-interface class used as base for dll-interface class"
// Happens when deriving from Singleton because bug in compiler ignores
// template export
#   pragma warning (disable : 4275)

// disable: "C++ Exception Specification ignored"
// This is because MSVC 6 did not implement all the C++ exception
// specifications in the ANSI C++ draft.
#   pragma warning( disable : 4290 )

// disable: "no suitable definition provided for explicit template
// instantiation request" Occurs in VC7 for no justifiable reason on all
// #includes of Singleton
#   pragma warning( disable: 4661)

// disable: deprecation warnings when using CRT calls in VC8
// These show up on all C runtime lib code in VC8, disable since they clutter
// the warnings with things we may not be able to do anything about (e.g.
// generated code from nvparse etc). I doubt very much that these calls
// will ever be actually removed from VC anyway, it would break too much code.
#	pragma warning( disable: 4996)

// disable: "conditional expression constant", always occurs on 
#   pragma warning (disable : 201)

#endif

namespace TR
{
	// define the real number values to be used
	// default to use 'float' unless precompiler option set
	#if TR_DOUBLE_PRECISION == 1
	/** Software floating point type.
	@note Not valid as a pointer to GPU buffers / parameters
	*/
		typedef double Real;
	#else
	/** Software floating point type.
	@note Not valid as a pointer to GPU buffers / parameters
	*/
		typedef float Real;
	#endif

	// Integer formats of fixed bit width
	typedef unsigned int uint32;
	typedef unsigned short uint16;
	typedef unsigned char uint8;
}

#endif